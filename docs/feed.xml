<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AJ Weeks</title>
    <description>AJ Weeks - Graphics Programmer</description>
    <link>https://ajweeks.com/</link>
    <atom:link href="https://ajweeks.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 05 Aug 2024 13:55:39 +0200</pubDate>
    <lastBuildDate>Mon, 05 Aug 2024 13:55:39 +0200</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>SSAO in Vulkan</title>
        <description>&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-final-01.jpg&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/img/ssao-final-01.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSAO (Screen-space ambient occlusion) is a widespread technique employed by many games to simulate the shadowing effect of objects occluding other nearby objects. It was originally proposed by Crytek in 2007 (&lt;a class=&quot;underline&quot; href=&quot;https://developer.amd.com/wordpress/media/2012/10/Chapter8-Mittring-Finding_NextGen_CryEngine2.pdf&quot;&gt;original paper [1]&lt;/a&gt;), and has since seen many improvements. I’ve implemented a variant of it in &lt;a class=&quot;underline&quot; href=&quot;https://ajweeks.com/flex-engine/&quot;&gt;Flex&lt;/a&gt; recently, and this is a short discussion of the implementation details.&lt;/p&gt;

&lt;p&gt;The necessary inputs are the scene depth and normals, both in view space. The depth buffer will be used as a rough estimate of how occluded each pixel is, and the normals will be used to orient a hemisphere about each pixel to generate our sample points in. Because Flex already supports deferred rendering, these two input buffers were readily available. The only change necessary was to output the normals in view space, rather than world space.&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-depth.jpg&quot;&gt;&lt;img width=&quot;49%&quot; src=&quot;/assets/img/ssao-depth.jpg&quot; /&gt;&lt;/a&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-normals.jpg&quot;&gt;&lt;img width=&quot;49%&quot; src=&quot;/assets/img/ssao-normals.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Instead of depth, some implementations require a three-channel position buffer as input. I’ve opted to reconstruct position from the depth buffer instead to save on texture bandwidth. There’s a number of ways to do this, if you’re implementing this yourself then definitely give this &lt;a class=&quot;underline&quot; href=&quot;https://mynameismjp.wordpress.com/2009/03/10/reconstructing-position-from-depth/&quot;&gt;three&lt;/a&gt; &lt;a class=&quot;underline&quot; href=&quot;https://mynameismjp.wordpress.com/2009/05/05/reconstructing-position-from-depth-continued/&quot;&gt;part&lt;/a&gt; &lt;a class=&quot;underline&quot; href=&quot;https://mynameismjp.wordpress.com/2010/09/05/position-from-depth-3/&quot;&gt;series&lt;/a&gt; by MJP a read. I opted for using the already existing view-space hardware depth buffer. Here’s how I’m unpacking that into a view-space position:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reconstructVSPosFromDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_Depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posVS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uboConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invProj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posVS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posVS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to avoid banding artifacts we will modulate the sample points by some random noise. A 4x4 noise texture can be generated at startup. To get random rotations around the z-axis, our texture will contain values in the range [-1.0, 1.0] in the red and green channels. This requires the use of a floating point texture format, but could easily be scaled and biased to fit into an integral format just as well.&lt;/p&gt;

&lt;div style=&quot;text-align: center; padding-top: 30px&quot;&gt;Packed two channel noise texture&lt;/div&gt;
&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-noise-rg.jpg&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/img/ssao-noise-rg.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To orient the hemisphere about the normal, I first use the &lt;a class=&quot;underline&quot; href=&quot;https://en.wikipedia.org/wiki/Gram–Schmidt_process&quot;&gt;Gram-Schmidt&lt;/a&gt; process to obtain a local coordinate frame:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;ivec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depthSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_Depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;ivec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noiseSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_Noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderScale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// SSAO is rendered at 0.5x scale&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noiseUV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noiseSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noiseSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex_UV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randVec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_Noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noiseUV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tangent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randVec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randVec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitangent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cross&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tangent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;mat3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mat3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tangent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitangent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the real meat of the algorithm can commence:&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSAO_KERNEL_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uboConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posVS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSAO_RADIUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Convert view-space position into clip-space&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uboConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;vec3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reconstructedPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reconstructVSPosFromDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reconstructedPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSAO_KERNEL_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fragColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In essence, we count all points that are farther into the scene than the current fragment as occluders, and all others as non-occluders. Note that this is calculated at half-size since it a low-frequency effect and this quarters the execution time necessary.&lt;/p&gt;

&lt;p&gt;This solution however has some gaping holes which need to be patched up. For one, large depth discontinuities are ignored, causing a dark halo effect around objects which are well in front of other objects. This can be addressed by scaling the occlusion factor based a point’s distance from the center.&lt;/p&gt;

&lt;p&gt;Another big issue with the current implementation is the level of noise. We traded off banding artifacts for noise by jittering the sampled location, but a simple blur pass will greatly improve the final result. The blur should run at full-resolution in order to avoid cracks at the edges of objects. I first implemented a simple &lt;a class=&quot;underline&quot; href=&quot;https://en.wikipedia.org/wiki/Box_blur&quot;&gt;box blur&lt;/a&gt;, but later replaced it with a two-pass edge-preserving &lt;a class=&quot;underline&quot; href=&quot;https://en.wikipedia.org/wiki/Bilateral_filter&quot;&gt;bilateral blur&lt;/a&gt; covered in more detail below.&lt;/p&gt;

&lt;div class=&quot;language-glsl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smoothstep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uboConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssaoRadius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reconstructedPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;occlusion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reconstructedPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplePos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rangeCheck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-sibnek.jpg&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/img/ssao-sibnek.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;two-pass-bilateral-blur&quot;&gt;Two-pass bilateral blur&lt;/h3&gt;
&lt;p&gt;An NxN box blur is a simple effect to implement, however also an expensive one to compute, especially as N increases. The technique is to simply average all the pixel values around the pixel you’re blurring (extending N pixels out).&lt;/p&gt;

&lt;p&gt;A much more efficient approach is to use a separable blur. This just means computing the blur in two passes. The first pass will calculate the horizontal blur using just N samples, and the second will compute the vertical blur, again using just N samples. Because the blur filter is “separable”, this is mathematically-equivillent and therefore produces the same image. The reduction from N&lt;sup&gt;2&lt;/sup&gt; samples to just 2N samples is a huge win. The three stages of the bilateral blur are shown below.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-blur.gif&quot;&gt;&lt;img src=&quot;/assets/img/ssao-blur.gif&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-01z.jpg&quot;&gt;&lt;img src=&quot;/assets/img/ssao-01z.jpg&quot; width=&quot;32%&quot; /&gt;&lt;/a&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-02z.jpg&quot;&gt;&lt;img src=&quot;/assets/img/ssao-02z.jpg&quot; width=&quot;32%&quot; /&gt;&lt;/a&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-03z.jpg&quot;&gt;&lt;img src=&quot;/assets/img/ssao-03z.jpg&quot; width=&quot;32%&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In order to avoid blurring across hard edges, the normal and depth buffers are passed into the blur shader. When sampling neighbouring pixels, samples whose depth lie outside of a given distance or whose normal differs by a large-enough value are ignored. This allows for edges to remain sharp, and prevents blurring across large depth discontinuities. This extra step makes the blur &lt;a class=&quot;underline&quot; href=&quot;https://en.wikipedia.org/wiki/Bilateral_filter&quot;&gt;bilateral&lt;/a&gt; (or, “edge-preserving”).&lt;/p&gt;

&lt;h3 id=&quot;specialization-constants&quot;&gt;Specialization Constants&lt;/h3&gt;
&lt;p&gt;I utilized SPIR-V’s &lt;a class=&quot;underline&quot; href=&quot;https://renderdoc.org/vkspec_chunked/chap9.html#pipelines-specialization-constants&quot;&gt;specialization constant&lt;/a&gt; feature to retrieve a unique ID for the &lt;i&gt;kernelSize&lt;/i&gt; constant uniform so it can be updated without needing to modify the shader code dynamically. See &lt;a class=&quot;underline&quot; href=&quot;https://blogs.igalia.com/itoral/2018/03/20/improving-shader-performance-with-vulkans-specialization-constants/&quot;&gt;[5]&lt;/a&gt; for a great explanation.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/ssao-final-02.jpg&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/img/ssao-final-02.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! As always, the source code is all available on &lt;a class=&quot;underline&quot; href=&quot;https://github.com/ajweeks/FlexEngine/tree/development&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;p&gt;[1] &lt;a class=&quot;underline&quot; href=&quot;https://developer.amd.com/wordpress/media/2012/10/Chapter8-Mittring-Finding_NextGen_CryEngine2.pdf&quot;&gt;Finding Next Gen - CryEngine 2&lt;/a&gt;&lt;br /&gt;
[2] &lt;a class=&quot;underline&quot; href=&quot;https://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html&quot;&gt;SSAO Tutorial - John Chapman&lt;/a&gt;&lt;br /&gt;
[3] &lt;a class=&quot;underline&quot; href=&quot;https://learnopengl.com/Advanced-Lighting/SSAO&quot;&gt;LearnOpenGL.com - SSAO&lt;/a&gt;&lt;br /&gt;
[4] &lt;a class=&quot;underline&quot; href=&quot;https://mtnphil.wordpress.com/2013/06/26/know-your-ssao-artifacts/&quot;&gt;Know your SSAO artifacts - Philip Fortier&lt;/a&gt;&lt;br /&gt;
[5] &lt;a class=&quot;underline&quot; href=&quot;https://blogs.igalia.com/itoral/2018/03/20/improving-shader-performance-with-vulkans-specialization-constants/&quot;&gt;Improving shader performance with Vulkan’s specialization constants - Iago Toral&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a class=&quot;underline&quot; href=&quot;https://sketchfab.com/luyssport&quot;&gt;luyssport&lt;/a&gt; for the &lt;a class=&quot;underline&quot; href=&quot;https://sketchfab.com/3d-models/che-1e529f4b8efc4f20925957a9a4208dcd&quot;&gt;car model&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sat, 11 May 2019 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2019/05/11/SSAO/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2019/05/11/SSAO/</guid>
        
        <category>ssao,</category>
        
        <category>vulkan,</category>
        
        <category>graphics</category>
        
        <category>programming,</category>
        
        <category>game</category>
        
        <category>dev,</category>
        
        <category>screen</category>
        
        <category>space,</category>
        
        <category>ambient</category>
        
        <category>occlusion</category>
        
        
      </item>
    
      <item>
        <title>Essential Tools for Game Developers</title>
        <description>&lt;p&gt;This is an ongoing list of things I find really useful.&lt;/p&gt;

&lt;p&gt;If you have any that you couldn’t live without that aren’t here, let me know on twitter &lt;a class=&quot;underline&quot; href=&quot;https://twitter.com/_ajweeks_&quot;&gt;@_ajweeks_&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;General programmers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://www.listary.com&quot;&gt;Listary&lt;/a&gt; - for finding any file or folder on your system almost instantly [free]&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://www.wholetomato.com&quot;&gt;Visual Assist&lt;/a&gt; - for various useful code searching/editing features in VS&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://github.com/mridgers/clink&quot;&gt;clink&lt;/a&gt; - adds some nice to have features to shell (cmd)&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://www.manictime.com&quot;&gt;Manic Time&lt;/a&gt; - time tracking software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Graphics-specific:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://renderdoc.org&quot;&gt;RenderDoc&lt;/a&gt; - for debugging anything graphical&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://developer.nvidia.com/nsight-visual-studio-edition&quot;&gt;Nvidia Nsight&lt;/a&gt; - for debugging anything graphical when RenderDoc isn’t working&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/graphics/visual-studio-graphics-diagnostics?view=vs-2019&quot;&gt;Visual Studio Graphics Debugging&lt;/a&gt; - for debugging anything graphical when Nsight isn’t working either&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://github.com/SaschaWillems/Vulkan&quot;&gt;Sascha Willems’ Vulkan&lt;/a&gt; - for example Vulkan code&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://handmadehero.org&quot;&gt;Handmade Hero&lt;/a&gt; - recorded live-streams of in-depth explanations of every aspect that goes into making a full game from scratch&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://www.gameenginebook.com&quot;&gt;Game Engine Architecture&lt;/a&gt; - book (more aptly, a tome) describing many details of creating a game engine&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://fgiesen.wordpress.com&quot;&gt;The ryg blog&lt;/a&gt; - insanely detailed explanations of various CS topics&lt;/li&gt;
  &lt;li&gt;&lt;a class=&quot;underline&quot; href=&quot;https://www.jendrikillner.com/tags/weekly&quot;&gt;Graphics Programming Weekly&lt;/a&gt;- weekly blog posts summarizing the past week’s news in graphics&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 May 2019 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2019/05/05/EssentialToolsForGameDevelopers/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2019/05/05/EssentialToolsForGameDevelopers/</guid>
        
        <category>tools,</category>
        
        <category>resources,</category>
        
        <category>game</category>
        
        <category>dev,</category>
        
        <category>graphics,</category>
        
        <category>links</category>
        
        
      </item>
    
      <item>
        <title>Reverse Z</title>
        <description>&lt;p&gt;I recently switched the depth buffers in &lt;a class=&quot;underline&quot; href=&quot;https://ajweeks.com/flex-engine&quot;&gt;Flex Engine&lt;/a&gt; to use “reversed Z” due to the precision benefits it provides. The default way of encoding depth is from 0.0 to 1.0 as objects get further from the camera. One reason to reverse this is to spread the depth precision out more evenly across the distance of your scene. Using the default encoding, floating point precision combined with a non-linear depth results in lots of precision right next to the near plane, and little precision as things get farther away. See &lt;a class=&quot;underline&quot; href=&quot;https://www.reedbeta.com/blog/depth-precision-visualized&quot;&gt;this&lt;/a&gt; for a more in-depth explanation. I also found a great explanation of the perspective projection &lt;a class=&quot;underline&quot; href=&quot;http://ogldev.atspace.co.uk/www/tutorial12/tutorial12.html&quot;&gt;here&lt;/a&gt;, which was a great refresher.&lt;/p&gt;

&lt;p&gt;The four steps (five for OpenGL) involved in swapping to reversed Z are as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Swap near and far plane values&lt;/li&gt;
  &lt;li&gt;Use greater than or equal as a depth comparison rather than less than or equal to (e.g. GL_GEQUAL or VK_COMPARE_OP_GREATER_OR_EQUAL in OpenGL or Vulkan respectively)&lt;/li&gt;
  &lt;li&gt;Clear the depth value to 0.0 at the start of each frame rather than 1.0&lt;/li&gt;
  &lt;li&gt;Ensure your depth buffer is using a floating point format&lt;/li&gt;
  &lt;li&gt;If using OpenGL, call “glClipControl(GL_LOWER_LEFT, GL_ZERO_TO_ONE)” to make the depth clip range [0, 1] rather than the default of [-1, 1]. (Note that this function is provided in the “GL_ARB_clip_control” extension, which became core in version 4.5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This change doesn’t make a visually noticeable difference, but it does allow for a lower precision depth buffer, and it should reduce the chances of any z-fighting issues for triangles with very similar positions, especially in shaders with a lot of calculations, and therefore potentially a lot of rounding errors.&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/depth-default.jpg&quot;&gt;&lt;img src=&quot;/assets/img/depth-default.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/depth-reversed.jpg&quot;&gt;&lt;img src=&quot;/assets/img/depth-reversed.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;

&lt;center&gt;
Default depth buffer (left) reversed depth buffer (right)
&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Apr 2019 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2019/04/06/ReverseZ/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2019/04/06/ReverseZ/</guid>
        
        <category>rendering,</category>
        
        <category>graphics,</category>
        
        <category>z</category>
        
        <category>buffer</category>
        
        
      </item>
    
      <item>
        <title>Handling Player Input</title>
        <description>&lt;p&gt;As I’ve added more and more game mechanics to &lt;a class=&quot;underline&quot; href=&quot;https://ajweeks.com/FlexEngine&quot;&gt;Flex&lt;/a&gt;, I’ve experimented with different input methods a player can use to interact with the world besides the typical ‘Press E to interact’ (spinning a valve by &lt;a class=&quot;underline&quot; href=&quot;https://www.youtube.com/watch?v=_6wftcZg1jg&quot;&gt;rotating a joystick&lt;/a&gt; is one alternative method). So far I’ve added support for keyboard, mouse, and XBOX controllers, but I will likely further expand the number of supported devices in the future (midi keyboards anyone?). The code I have been using to handle each input method is quite messy and needed to be cleaned up. This post will cover the process I went through to get where I’m at today with the system.&lt;/p&gt;

&lt;p&gt;To see why I felt this change was necessary, take a look at how I was checking for a jump input:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsGamepadButtonPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GamepadButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bPlayerUsingKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetKeyPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_SPACE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly not good in a number of ways:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;The player can not edit keybindings&lt;/strong&gt;. This is the &lt;em&gt;first&lt;/em&gt; item on the “basic” category on the great &lt;a class=&quot;underline&quot; href=&quot;https://gameaccessibilityguidelines.com/&quot;&gt;Game Accessibility Guidelines&lt;/a&gt;, so I’d say it’s a necessary feature to have if you have any desire to cater toward disabled gamers, plus it’s a useful feature for able gamers alike.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; That’s simply &lt;strong&gt;too much code&lt;/strong&gt; for catching an action event, and it will only grow longer as more input methods are added. This will inevitably lead to typos and copy-paste errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Single events could be handled multiple times&lt;/strong&gt; by different systems leading to, for example, the player walking forward when ‘W’ was pressed, even when a text box showing above the play area already handled the keypress.&lt;/p&gt;

&lt;h4 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h4&gt;
&lt;p&gt;To get around the first two issues noted above, we can add a layer of abstraction between the usage code and the input events. (It’s the &lt;a class=&quot;underline&quot; href=&quot;https://en.wikipedia.org/wiki/Fundamental_theorem_of_software_engineering&quot;&gt;Fundamental theorem of software engineering&lt;/a&gt; after all!)&lt;/p&gt;

&lt;p&gt;Once a mapping exists between game-specific-actions (like &lt;code class=&quot;inline&quot;&gt;MOVE_FORWARD&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;INTERACT&lt;/code&gt;) and inputs (like &lt;code class=&quot;inline&quot;&gt;KeyCode::KEY_W&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;GamepadButton::A&lt;/code&gt;), the usage code can be simplified to just check for an &lt;code class=&quot;inline&quot;&gt;Action&lt;/code&gt; and players will be able to remap keys as they like.&lt;/p&gt;

&lt;p&gt;To implement this mapping, I created an enumeration which defines all possible actions that can be taken in-game. I also created an &lt;code class=&quot;inline&quot;&gt;InputBinding&lt;/code&gt; struct which holds all necessary info about which actual inputs each action maps to. The mapping process is then simply indexing into the list using an &lt;code class=&quot;inline&quot;&gt;Action&lt;/code&gt; as the index.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVE_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVE_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVE_FORWARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MOVE_BACKWARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;INTERACT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputBinding&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KeyCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MouseAxis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseAxis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MouseAxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GamepadButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamepadButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GamepadButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GamepadAxis&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamepadAxis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GamepadAxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bNegative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;InputBinding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_InputBindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_NONE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, rather than that mess shown earlier, we can catch jump event as follows:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActionPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the curious, see how &lt;code class=&quot;inline&quot;&gt;GetActionPressed&lt;/code&gt; is implemented &lt;a class=&quot;underline&quot; href=&quot;https://gist.github.com/ajweeks/49179473bd576aa669cc88fd06848ed3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This system addresses the first two issues noted above, but to solve the third problem (event handling duplication) we’ll need go deeper.&lt;/p&gt;

&lt;h4 id=&quot;callbacks&quot;&gt;Callbacks&lt;/h4&gt;
&lt;p&gt;In order to allow one system to “consume” an event, thereby preventing other systems from also handling it, I added a callback system for each event type.&lt;/p&gt;

&lt;p&gt;To allow an event caller to call member functions on miscellaneous types, I created an abstract class that contains one virtual function. The event caller can maintain a list of listeners using this abstract type, and call the function without knowing anything about the subclass that implements it and keeps a reference to the object which the member function should be called on. The syntax is a little strange, but it works.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventReply&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CONSUMED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UNCONSUMED&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ICallbackMouseButton&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MouseButtonEventCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICallbackMouseButton&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;MouseButtonEventCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CallbackFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CallbackFunction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The trickiest part about that code was the &lt;code class=&quot;inline&quot;&gt;using&lt;/code&gt; declaration syntax, but luckily I know a &lt;a class=&quot;underline&quot; href=&quot;https://twitter.com/simon_coenen&quot;&gt;template wizard&lt;/a&gt; who helped me out.&lt;/p&gt;

&lt;p&gt;I defined similar classes for mouse move &amp;amp; keyboard events, but I’ll leave them out for the sake of brevity.&lt;/p&gt;

&lt;p&gt;To register a callback, a system has to define a function matching the signature of the callback, as well as an instance of the subclassed callback object. This instance takes the type of the listener as a template argument, which is how it’s able to call the member function you point it towards.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnMouseButtonEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MouseButtonEventCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseButtonCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because the callback object has no default constructor you must initialize it in the constructor of the listener. You must also bind and unbind at the appropriate times:&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mouseButtonCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnMouseButtonEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindMouseButtonEventCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseButtonCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnbindMouseButtonEventCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseButtonCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DebugCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnMouseButtonEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONSUMED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNCONSUMED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The binding/unbinding functions simply add and remove entries into the list of listeners.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICallbackMouseButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_MouseButtonCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When an event is generated, the event caller can iterate over the listeners until one listener consumes it, at which point the propagation stops.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Called by OS callback on mouse button press&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButtonCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;KeyAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_MouseButtonCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rbegin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_MouseButtonCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventReply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONSUMED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This system nicely handles the third issue I noted at the start, but it ignores the first issue! To solve all three, I added yet another callback, this time for &lt;code class=&quot;inline&quot;&gt;Action&lt;/code&gt; events. Determining when to call these took a bit of fiddling, especially since I wanted to keep the other callbacks. This was made more complex by the priority system I had since added which determines the order in which the callbacks are called. Priority is determined simply by an integer specified at event bind-time. (&lt;a class=&quot;underline&quot; href=&quot;https://github.com/ajweeks/FlexEngine/commit/7ccf1d00dc0961ac08fd9af5f516cb9ec8b44a52#diff-1b7a63e8c012c6ad34c6d9677f5b0781&quot;&gt;diff&lt;/a&gt;) You can find the code in its entirety on &lt;a class=&quot;underline&quot; href=&quot;https://github.com/ajweeks/FlexEngine/commits/development&quot;&gt;GitHub&lt;/a&gt; if you’d like to dig through it further.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;I would prefer to be able to store the callback objects in the event caller classes so that each listener doesn’t require an extra member, but I don’t believe that’s possible without a reflection system (which I’m not keen enough on to bother implementing). Maybe one of these days someone will release a &lt;a class=&quot;underline&quot; href=&quot;https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md&quot;&gt;decent programming language with reflection support…&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While implementing this system I was very wary of compile times, and knowing that templates and modern C++ classes are &lt;a class=&quot;underline&quot; href=&quot;https://zeuxcg.org/2019/01/17/is-c-fast/&quot;&gt;known&lt;/a&gt; for being slow in several senses, I tried to keep things as simple as I could. However, I think there’s still some work to be done in that regard. With that said, this system feels like a big step forward and I’ve been really enjoying cleaning up the old code to use it.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 +0100</pubDate>
        <link>https://ajweeks.com/blog/2019/02/04/InputHandling/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2019/02/04/InputHandling/</guid>
        
        <category>input</category>
        
        <category>handling,</category>
        
        <category>input,</category>
        
        <category>gamedev,</category>
        
        <category>accessibility</category>
        
        
      </item>
    
      <item>
        <title>Raymarching Workshop</title>
        <description>&lt;p&gt;I recently published the course notes I created for a workshop I gave at &lt;a class=&quot;underline&quot; href=&quot;https://electricsquare.com&quot;&gt;work&lt;/a&gt; here: &lt;a class=&quot;underline&quot; href=&quot;https://github.com/ElectricSquare/RaymarchingWorkshop&quot;&gt;github.com/ElectricSquare/RaymarchingWorkshop&lt;/a&gt;. The workshop takes you through the theory and application of raymarching, an alternative rendering technique to rasterization. By the end you will have your very own raymarcher which can produce images like the one shown below! No prior graphics programming experience is required, nor is any software besides a web browser!&lt;/p&gt;

&lt;p&gt;So if you’re interested in learning about graphics programming, take a look and share what you make!&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;a class=&quot;underline&quot; href=&quot;https://github.com/ElectricSquare/RaymarchingWorkshop&quot;&gt;github.com/ElectricSquare/RaymarchingWorkshop&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ElectricSquare/RaymarchingWorkshop&quot;&gt;&lt;img width=&quot;100%&quot; src=&quot;/assets/img/raymarching-02.webp&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Jan 2019 00:00:00 +0100</pubDate>
        <link>https://ajweeks.com/blog/2019/01/21/Raymarching-Workshop/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2019/01/21/Raymarching-Workshop/</guid>
        
        <category>rendering,</category>
        
        <category>graphics,</category>
        
        <category>raymarching,</category>
        
        <category>workshop,</category>
        
        <category>course</category>
        
        <category>notes</category>
        
        
      </item>
    
      <item>
        <title>Flex Engine Update 5</title>
        <description>&lt;p&gt;It has been a while since the &lt;a class=&quot;underline&quot; href=&quot;/blog/2017/10/05/Flex-Engine-Update-4/&quot;&gt;last update&lt;/a&gt; (almost nine months!), and a lot has changed in that time! I finished adding support for image-based lighting and reflection probes, then after a short break I came back to the project and decided to shift my goal with it from being to create a tool to learn graphics APIs with to now creating a game with. To that end, I’ve temporarily suspended support for Vulkan and left OpenGL as the primary graphics API being used while I focus on adding support for gameplay systems.&lt;/p&gt;

&lt;p&gt;Having a concrete goal to aim for has proven very useful for a number of reasons, the biggest of which being the restrictions a game places on the engine’s features. Any feature that doesn’t directly improve the game is immediately cut. By not making any assumptions about what &lt;em&gt;might&lt;/em&gt; be needed in the future, and instead only implementing features which are necessary right now, I ensure that my time is spent directly benefiting the game.&lt;/p&gt;

&lt;p&gt;The main features I’ve implemented since the last update include &lt;em&gt;scene serialization&lt;/em&gt;, &lt;em&gt;audio playback&lt;/em&gt;, &lt;em&gt;text rendering&lt;/em&gt;, &lt;em&gt;post-processing&lt;/em&gt;, and &lt;em&gt;physics simulation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To serialize a scene I write all objects, materials, and lights to a JSON file. I first added a JSON parser/writer, and then I added support for saving the various types of objects (simple meshes, physics data, reflection probes, the skybox, …). Recently I added a distinction between a user-saved file and the default scene layout. This way a player can go through the game and save their progress, while at any time being able to “restart” and erase all their progress. I also added support for saving out “prefabs” to individual files, which can be instantiated into scenes without duplicating the shared fields. I also added a translation gizmo which is displayed on top of the currently selected object to make moving objects around the scene easier.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-13.gif&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-13.gif&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For audio playback I’m using &lt;a class=&quot;underline&quot; href=&quot;https://www.openal.org/&quot;&gt;OpenAL&lt;/a&gt;. So far I’ve just added bare-bones support with no mixing or fancy controls – just playing, pausing, and stopping sounds and setting volume and pitch.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-14.png&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-14.png&quot; width=&quot;60%&quot; style=&quot;display: block; margin: 0 auto&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To load fonts I’m using &lt;a class=&quot;underline&quot; href=&quot;https://www.freetype.org/&quot;&gt;FreeType&lt;/a&gt;, and then generating a signed distance-field font atlas per variant at startup. Signed distance-field fonts are great at drawing text at different sizes without loss of detail, which is why I chose to add support for them. I’m planning on eventually saving the generated atlas out to disk and then loading in that texture on successive runs, rather than generate it on each bootup.&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-15.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-15.jpg&quot; width=&quot;79%&quot; /&gt;&lt;/a&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-16.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-16.jpg&quot; width=&quot;19.5%&quot; /&gt;&lt;/a&gt;
  &lt;span class=&quot;caption&quot;&gt;Signed distance-field font atlas, utilizing four colour channels (right: combined)&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’ve added handful of post-processing effects thus far including basic contrast, brightness, and saturation control, tone-mapping,  gamma-correction, “fast approximate anti-aliasing”, and chromatic aberration. Those effects already give me a lot of control over the final image, but I’ll definitely be adding more effects as time goes on, including a better AA solution, bloom, and screen-space ambient occlusion among others.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-17.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-17.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;span class=&quot;caption&quot;&gt;Some different looks I’m able to achieve by tweaking contrast, brightness, and saturation&lt;/span&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For physics simulation I’m using &lt;a class=&quot;underline&quot; href=&quot;https://pybullet.org/wordpress/&quot;&gt;Bullet&lt;/a&gt;. It was quite a simple addition to the project which just required adding some boilerplate initialization and destruction code and a wrapper for rigid bodies.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-18.png&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-18.png&quot; width=&quot;60%&quot; style=&quot;display: block; margin: 0 auto&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Besides those features I’ve made lots of small changes and additions, including adding gamepad support, basic profiling helpers, and several configuration files which are super helpful for saving user-specific state between sessions.&lt;/p&gt;

&lt;p&gt;Going forward I’ll be continuing to focus on implementing and improving gameplay-systems and hopefully getting closer to having a fun game.&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Jul 2018 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2018/07/03/Flex-Engine-Update-5/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2018/07/03/Flex-Engine-Update-5/</guid>
        
        <category>miscellaneous</category>
        
        
      </item>
    
      <item>
        <title>Relaxing</title>
        <description>&lt;p&gt;I’m the kind of person who finds it difficult to really relax. I think most people can easily enough, when on holiday, sit in a lawn chair on the beach sipping a cold alcoholic beverage, and forget about the real world – at least for a while. I tend to be incapable of such a feat. There’s always something on my to-do list, in fact there’s always many things on it. As hard as I try to just do nothing, I feel guilty for not checking things off the list.&lt;/p&gt;

&lt;p&gt;And so, when I find myself in the limbo of being in between one major project’s completion and the beginning of the next, with no deadlines looming overhead, I feel unsure as to how I should spend my waking hours. To resolve this, I like to use one of my favorite tools: lists. This morning when wondering what I could do today, I began by writing out everything that I could possibly do. It gave me a much-needed overview of my possible choices. It included activities like catching up on the movies that have been accumulating on my  to-watch list, continuing to work on the project that just came to a “completion”, and writing this blog post.&lt;/p&gt;

&lt;p&gt;Also on that list were things like playing games that I’ve purchased but haven’t had the time to finish, reading books that have been mostly just collecting dust, and other activities which I don’t often make time for like 3D modeling, making music, sketching, and journaling.&lt;/p&gt;

&lt;p&gt;It seems like I’ve decided that writing this blog post is a worth-while first activity for the day, who knows what else I’ll chose to do. It seems probable that I’ll pick items from the list semi-randomly until the weekend slips away and I find myself on Monday morning embracing the guidance of a brand new deadline being placed above me.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Nov 2017 00:00:00 +0100</pubDate>
        <link>https://ajweeks.com/blog/2017/11/11/Relaxing/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2017/11/11/Relaxing/</guid>
        
        <category>miscellaneous</category>
        
        
      </item>
    
      <item>
        <title>Flex Engine Update 4</title>
        <description>&lt;p&gt;Since the last post, I’ve decided on a name for this project – Flex Engine! I basically decided on it because it sounded neat, it’s short, and it’s easy to remember. However, as other people have pointed out it’s actually quite fitting to the project itself since both OpenGL and Vulkan are supported the engine is kind of Flexible.&lt;/p&gt;

&lt;p&gt;Other than deciding on a name, I’ve also made quite a bit of real progress on the engine. Starting about two weeks ago I began working full-time on the project, which is letting me progress much faster. As mentioned at the end of the previous entry, the next items on my to-do list were; skyboxes, deferred shading, and Physically Based Rendering, or PBR. Skyboxes were quickly checked off the list, then I moved on to the other two.&lt;/p&gt;

&lt;p&gt;I started off the full-time period by finishing the final bits of deferred shading. I then began tackling PBR. If you haven’t heard of it, it’s basically just an alternative set of techniques used for lighting objects. The typical “beginner” algorithm used for lighting calculations is called Blinn-Phong, and while it works alright, it’s about forty years old and we can do much better.&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-10.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-10.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-11.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-11.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;
  &lt;span class=&quot;caption&quot;&gt;PBR (left), Blinn-Phong (right)&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;While this comparison is slightly exaggerated since the textures were authored using the PBR workflow, one clearly looks more like a rusted iron ball.&lt;/p&gt;

&lt;p&gt;After that was implemented in both OpenGL and Vulkan, I moved on to adding support for a feature commonly associated with PBR – Image Based Lighting, or IBL. It is an attempt to take into account the environment’s effect on an object’s final color. It adds a great deal of realism and it really makes PBR shine.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/flex-engine-12.jpg&quot;&gt;&lt;img src=&quot;/assets/img/flex-engine-12.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;span class=&quot;caption&quot;&gt;Progress on IBL (not quite there yet)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Once IBL is fully implemented in both APIs, I will begin working on adding support for reflection probes. The general idea is this: instead of sampling a global cubemap for all objects (like above), individual snapshots of different parts of the world are taken and then used depending on each object’s position. One example of why this is needed is seeing reflections of clouds on objects that are indoors tends to look a bit off. Reflection probes can be placed around the world (some inside, some outside) and objects will use a blend of the nearest cubemap captures to create more realistic reflections. Stay tuned for updates on that!&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Oct 2017 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2017/10/05/Flex-Engine-Update-4/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2017/10/05/Flex-Engine-Update-4/</guid>
        
        <category>miscellaneous</category>
        
        
      </item>
    
      <item>
        <title>Rendering Engine Update 3</title>
        <description>&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/rendering-engine-04.png&quot;&gt;&lt;img src=&quot;/assets/img/rendering-engine-04.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve been busy continuing work on my rendering engine when I’ve had time this summer, and added a few nice features. Around the start of the summer I stopped development of the Direct3D renderer, for a number of reasons. Mainly, having to write all graphics code not once, not twice, but thrice &lt;em&gt;really&lt;/em&gt; slows down development. Secondly, I much prefer working in OpenGL and Vulkan and the later especially seems very performant on Windows.&lt;/p&gt;

&lt;p&gt;The most prominent new features are: diffuse mapping, specular mapping, and normal mapping. On the image to the left below you can see the regular normals, and on the right the updated normals once a normal map has been applied. Maybe adding brick textures to a teapot isn’t super realistic, but all I care about is that it works!&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/rendering-engine-05.png&quot;&gt;&lt;img src=&quot;/assets/img/rendering-engine-05.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/rendering-engine-06.png&quot;&gt;&lt;img src=&quot;/assets/img/rendering-engine-06.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve also done a lot of work which isn’t easily shown with just a screenshot. It’s mostly been in an attempt to allow for an arbitrary number of objects to render using an arbitrary number of shaders (or “materials”). In Vulkan there’s a surprising amount of work required to achieve this. I’m just about there, with just a few little kinks to still iron out.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/rendering-engine-07.png&quot;&gt;&lt;img src=&quot;/assets/img/rendering-engine-07.png&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next few items on the to-do list are; sky boxes, a deferred pipeline, and physically based rendering. That will surely keep me busy for the next few weeks at least.&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Aug 2017 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2017/08/16/Rendering-Engine-Update-3/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2017/08/16/Rendering-Engine-Update-3/</guid>
        
        <category>miscellaneous</category>
        
        
      </item>
    
      <item>
        <title>Ludum Dare 39 – ⚡ Swing Bolt ⚡</title>
        <description>&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/swing-bolt-01.jpg&quot;&gt;&lt;img src=&quot;/assets/img/swing-bolt-01.jpg&quot; width=&quot;49%&quot; style=&quot;float: right&quot; /&gt;&lt;/a&gt;
This past weekend I participated the thirty-ninth Ludum Dare game jam competition. For the unaware, it is a forty-eight hour game making competition based on a theme announced at the start of the event. In the days leading up to the event users can submit theme suggestions, and later vote on the best ones submitted. This time the theme was &lt;em&gt;Running out of Power&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The event started at three in the morning in my timezone, so as usual I slept through the announcement and started at a more sensible time, around eight. I spent the first hour or two brainstorming ideas that were manageable for me to make in just two days, but still interesting and unique. I ended up going with a hovercraft-like vehicle towing around device attached by a chain, whose job it was to collect batteries to stay charged. Looking back now, I think I should have spent a little more time in this phase to try to figure out additional mechanics that would add interesting gameplay, but nonetheless this turned out to be a decent mechanic on its own.&lt;/p&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/swing-bolt-02.jpg&quot;&gt;&lt;img src=&quot;/assets/img/swing-bolt-02.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I worked the rest of the day implementing the main mechanics; the chain, item pickups, and enemy spawning and basic AI. The blue sphere you see above are the “enemies”, they don’t actually serve any purpose – I never got around to adding any. They do however work as a difficulty ramp since as the game progresses more and more of the spawn, making it harder to reach the new batteries in time. In the evening when I was starting to get tired I began working on the less brain-intensive parts of the game like meshes, sound effects, music, post-processing, and menus.&lt;/p&gt;

&lt;p&gt;The following day I began by adding bombs that drop in every so often to give the player something to dodge, and I added a timer so the player can see how long they can last. I added more meshes, particles, UI elements, a little main menu animation, and I fixed some small bugs. I also spent quite a while trying to get a decent looking thumbnail, as I knew that would be the only thing people have to go on when deciding whether or not to play your game.&lt;/p&gt;

&lt;p&gt;With the deadline fast approaching, I finished off the game and submitted it around one in the morning, with two hours to spare.&lt;/p&gt;

&lt;div width=&quot;100%&quot;&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/swing-bolt-03.jpg&quot;&gt;&lt;img src=&quot;/assets/img/swing-bolt-03.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;
  &lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/swing-bolt-04.jpg&quot;&gt;&lt;img src=&quot;/assets/img/swing-bolt-04.jpg&quot; width=&quot;49%&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;/assets/img/swing-bolt-05.jpg&quot;&gt;&lt;img src=&quot;/assets/img/swing-bolt-05.jpg&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m definitely glad with how it turned out, as it was my first time doing a game jam by myself, and my third time ever. I’m currently working on a few small updates to the game, first is adding a leaderboard so you can compare your time to other people’s.&lt;/p&gt;

&lt;p&gt;If you want to play the game, you can find it on the submission page here: &lt;a class=&quot;underline&quot; href=&quot;https://ldjam.com/events/ludum-dare/39/swing-bolt&quot;&gt;ldjam.com/events/ludum-dare/39/swing-bolt&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;And you can find the project’s repository here: &lt;a class=&quot;underline&quot; href=&quot;https://github.com/ajweeks/LD39&quot;&gt;github.com/ajweeks/LD39&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to contact me on Twitter: &lt;a class=&quot;underline&quot; href=&quot;https://twitter.com/_ajweeks_&quot;&gt;@_ajweeks_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Aug 2017 00:00:00 +0200</pubDate>
        <link>https://ajweeks.com/blog/2017/08/03/Ludum-Dare-39/</link>
        <guid isPermaLink="true">https://ajweeks.com/blog/2017/08/03/Ludum-Dare-39/</guid>
        
        <category>miscellaneous</category>
        
        
      </item>
    
  </channel>
</rss>
